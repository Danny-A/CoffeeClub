/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "mutation CreateBean($input: beansInsertInput!) {\n  insertIntobeansCollection(objects: [$input]) {\n    records {\n      id\n      name\n      description\n      image_url\n      roast_type\n      process\n      roast_level\n      bean_type\n      elevation_min\n      elevation_max\n      origin\n      producer\n      notes\n      buy_urls\n      roasters {\n        id\n      }\n    }\n  }\n}": typeof types.CreateBeanDocument,
    "mutation CreateRoaster($input: roastersInsertInput!) {\n  insertIntoroastersCollection(objects: [$input]) {\n    records {\n      id\n      name\n      description\n      profile_image_url\n      location_city\n      location_state\n      location_country\n      url\n      instagram\n      created_at\n    }\n  }\n}": typeof types.CreateRoasterDocument,
    "mutation LikeBean($input: bean_likesInsertInput!) {\n  insertIntobean_likesCollection(objects: [$input]) {\n    records {\n      id\n      bean_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeBean($filter: bean_likesFilter!) {\n  deleteFrombean_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeRoaster($input: roaster_likesInsertInput!) {\n  insertIntoroaster_likesCollection(objects: [$input]) {\n    records {\n      id\n      roaster_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeRoaster($filter: roaster_likesFilter!) {\n  deleteFromroaster_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeLocation($input: location_likesInsertInput!) {\n  insertIntolocation_likesCollection(objects: [$input]) {\n    records {\n      id\n      location_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeLocation($filter: location_likesFilter!) {\n  deleteFromlocation_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}": typeof types.LikeBeanDocument,
    "mutation UpdateBean($id: UUID!, $set: beansUpdateInput!) {\n  updatebeansCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      name\n      description\n      image_url\n      roast_type\n      process\n      roast_level\n      bean_type\n      elevation_min\n      elevation_max\n      origin\n      producer\n      notes\n      buy_urls\n      is_published\n      created_at\n      updated_at\n      roasters {\n        id\n        name\n      }\n    }\n  }\n}": typeof types.UpdateBeanDocument,
    "mutation UpdateProfile($id: UUID!, $set: profilesUpdateInput!) {\n  updateprofilesCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      username\n      display_name\n      bio\n      profile_image_url\n      location\n      instagram\n      url\n      updated_at\n    }\n  }\n}": typeof types.UpdateProfileDocument,
    "mutation UpdateRoaster($id: UUID!, $set: roastersUpdateInput!) {\n  updateroastersCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      name\n      description\n      profile_image_url\n      location_city\n      location_state\n      location_country\n      url\n      instagram\n      is_published\n      created_at\n      updated_at\n    }\n  }\n}": typeof types.UpdateRoasterDocument,
    "query GetAllRoasters($first: Int) {\n  roastersCollection(\n    first: $first\n    orderBy: [{name: AscNullsLast}]\n    filter: {is_published: {eq: true}}\n  ) {\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}": typeof types.GetAllRoastersDocument,
    "query GetBean($id: UUID!, $filter: beansFilter) {\n  beansCollection(filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        description\n        image_url\n        roast_type\n        process\n        roast_level\n        bean_type\n        elevation_min\n        elevation_max\n        origin\n        producer\n        notes\n        buy_urls\n        is_published\n        roasters {\n          id\n          name\n        }\n        bean_varietiesCollection {\n          edges {\n            node {\n              varieties {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_tagsCollection {\n          edges {\n            node {\n              tags {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n              content\n              coffee_type\n              profiles {\n                id\n                username\n                display_name\n                profile_image_url\n              }\n              created_at\n            }\n          }\n        }\n        created_at\n      }\n    }\n  }\n}": typeof types.GetBeanDocument,
    "query GetBeans($filter: beansFilter, $first: Int, $after: Cursor) {\n  beansCollection(first: $first, after: $after, filter: $filter) {\n    edges {\n      cursor\n      node {\n        id\n        name\n        description\n        image_url\n        roast_type\n        process\n        roast_level\n        bean_type\n        elevation_min\n        elevation_max\n        origin\n        producer\n        notes\n        buy_urls\n        created_at\n        average_rating\n        is_published\n        roasters {\n          id\n          name\n        }\n        bean_varietiesCollection {\n          edges {\n            node {\n              varieties {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_tagsCollection {\n          edges {\n            node {\n              tags {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n        bean_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}": typeof types.GetBeansDocument,
    "query GetDashboardStats {\n  dashboard_statsCollection {\n    edges {\n      node {\n        id\n        total_users\n        total_beans\n        total_roasters\n        total_locations\n        total_bean_reviews\n        total_roaster_reviews\n        total_location_reviews\n      }\n    }\n  }\n  roastersCollection(first: 1000) {\n    edges {\n      node {\n        id\n        name\n        roaster_reviewsCollection {\n          edges {\n            node {\n              rating\n            }\n          }\n        }\n      }\n    }\n  }\n  beansCollection(first: 1000) {\n    edges {\n      node {\n        id\n        name\n        bean_reviewsCollection {\n          edges {\n            node {\n              rating\n            }\n          }\n        }\n      }\n    }\n  }\n  locationsCollection(first: 1000) {\n    edges {\n      node {\n        id\n        name\n        location_reviewsCollection {\n          edges {\n            node {\n              rating\n            }\n          }\n        }\n      }\n    }\n  }\n}": typeof types.GetDashboardStatsDocument,
    "query GetLocations($filter: locationsFilter, $first: Int, $after: Cursor) {\n  locationsCollection(filter: $filter, first: $first, after: $after) {\n    edges {\n      node {\n        id\n        name\n        description\n        image_url\n        address\n        latitude\n        longitude\n        url\n        instagram\n        claimed_by\n        created_at\n        is_published\n        location_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n        location_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}": typeof types.GetLocationsDocument,
    "query GetProfile($id: UUID!) {\n  profilesCollection(filter: {id: {eq: $id}}) {\n    edges {\n      node {\n        id\n        username\n        display_name\n        bio\n        profile_image_url\n        location\n        instagram\n        url\n        created_at\n      }\n    }\n  }\n}": typeof types.GetProfileDocument,
    "query GetRoaster($id: UUID!, $filter: roastersFilter) {\n  roastersCollection(filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        description\n        profile_image_url\n        location_city\n        location_state\n        location_country\n        url\n        instagram\n        claimed_by\n        is_published\n        beansCollection {\n          edges {\n            node {\n              id\n              name\n              description\n              origin\n              process\n              roast_level\n              average_rating\n              bean_likesCollection {\n                edges {\n                  node {\n                    id\n                    user_id\n                  }\n                }\n              }\n              bean_reviewsCollection {\n                edges {\n                  node {\n                    id\n                    rating\n                  }\n                }\n              }\n            }\n          }\n        }\n        created_at\n      }\n    }\n  }\n}": typeof types.GetRoasterDocument,
    "query GetRoasters($filter: roastersFilter, $first: Int, $after: Cursor) {\n  roastersCollection(filter: $filter, first: $first, after: $after) {\n    edges {\n      node {\n        id\n        name\n        description\n        profile_image_url\n        location_city\n        location_state\n        location_country\n        url\n        instagram\n        claimed_by\n        created_at\n        is_published\n        beansCollection {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        roaster_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}": typeof types.GetRoastersDocument,
    "query GetUserLikes($userId: UUID!, $first: Int, $after: Cursor) {\n  bean_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        beans {\n          id\n          name\n          roaster_id\n          process\n          image_url\n          roasters {\n            name\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  roaster_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        roasters {\n          id\n          name\n          profile_image_url\n          location_city\n          location_state\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  location_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        locations {\n          id\n          name\n          image_url\n          address\n          latitude\n          longitude\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}": typeof types.GetUserLikesDocument,
};
const documents: Documents = {
    "mutation CreateBean($input: beansInsertInput!) {\n  insertIntobeansCollection(objects: [$input]) {\n    records {\n      id\n      name\n      description\n      image_url\n      roast_type\n      process\n      roast_level\n      bean_type\n      elevation_min\n      elevation_max\n      origin\n      producer\n      notes\n      buy_urls\n      roasters {\n        id\n      }\n    }\n  }\n}": types.CreateBeanDocument,
    "mutation CreateRoaster($input: roastersInsertInput!) {\n  insertIntoroastersCollection(objects: [$input]) {\n    records {\n      id\n      name\n      description\n      profile_image_url\n      location_city\n      location_state\n      location_country\n      url\n      instagram\n      created_at\n    }\n  }\n}": types.CreateRoasterDocument,
    "mutation LikeBean($input: bean_likesInsertInput!) {\n  insertIntobean_likesCollection(objects: [$input]) {\n    records {\n      id\n      bean_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeBean($filter: bean_likesFilter!) {\n  deleteFrombean_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeRoaster($input: roaster_likesInsertInput!) {\n  insertIntoroaster_likesCollection(objects: [$input]) {\n    records {\n      id\n      roaster_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeRoaster($filter: roaster_likesFilter!) {\n  deleteFromroaster_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeLocation($input: location_likesInsertInput!) {\n  insertIntolocation_likesCollection(objects: [$input]) {\n    records {\n      id\n      location_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeLocation($filter: location_likesFilter!) {\n  deleteFromlocation_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}": types.LikeBeanDocument,
    "mutation UpdateBean($id: UUID!, $set: beansUpdateInput!) {\n  updatebeansCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      name\n      description\n      image_url\n      roast_type\n      process\n      roast_level\n      bean_type\n      elevation_min\n      elevation_max\n      origin\n      producer\n      notes\n      buy_urls\n      is_published\n      created_at\n      updated_at\n      roasters {\n        id\n        name\n      }\n    }\n  }\n}": types.UpdateBeanDocument,
    "mutation UpdateProfile($id: UUID!, $set: profilesUpdateInput!) {\n  updateprofilesCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      username\n      display_name\n      bio\n      profile_image_url\n      location\n      instagram\n      url\n      updated_at\n    }\n  }\n}": types.UpdateProfileDocument,
    "mutation UpdateRoaster($id: UUID!, $set: roastersUpdateInput!) {\n  updateroastersCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      name\n      description\n      profile_image_url\n      location_city\n      location_state\n      location_country\n      url\n      instagram\n      is_published\n      created_at\n      updated_at\n    }\n  }\n}": types.UpdateRoasterDocument,
    "query GetAllRoasters($first: Int) {\n  roastersCollection(\n    first: $first\n    orderBy: [{name: AscNullsLast}]\n    filter: {is_published: {eq: true}}\n  ) {\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}": types.GetAllRoastersDocument,
    "query GetBean($id: UUID!, $filter: beansFilter) {\n  beansCollection(filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        description\n        image_url\n        roast_type\n        process\n        roast_level\n        bean_type\n        elevation_min\n        elevation_max\n        origin\n        producer\n        notes\n        buy_urls\n        is_published\n        roasters {\n          id\n          name\n        }\n        bean_varietiesCollection {\n          edges {\n            node {\n              varieties {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_tagsCollection {\n          edges {\n            node {\n              tags {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n              content\n              coffee_type\n              profiles {\n                id\n                username\n                display_name\n                profile_image_url\n              }\n              created_at\n            }\n          }\n        }\n        created_at\n      }\n    }\n  }\n}": types.GetBeanDocument,
    "query GetBeans($filter: beansFilter, $first: Int, $after: Cursor) {\n  beansCollection(first: $first, after: $after, filter: $filter) {\n    edges {\n      cursor\n      node {\n        id\n        name\n        description\n        image_url\n        roast_type\n        process\n        roast_level\n        bean_type\n        elevation_min\n        elevation_max\n        origin\n        producer\n        notes\n        buy_urls\n        created_at\n        average_rating\n        is_published\n        roasters {\n          id\n          name\n        }\n        bean_varietiesCollection {\n          edges {\n            node {\n              varieties {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_tagsCollection {\n          edges {\n            node {\n              tags {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n        bean_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}": types.GetBeansDocument,
    "query GetDashboardStats {\n  dashboard_statsCollection {\n    edges {\n      node {\n        id\n        total_users\n        total_beans\n        total_roasters\n        total_locations\n        total_bean_reviews\n        total_roaster_reviews\n        total_location_reviews\n      }\n    }\n  }\n  roastersCollection(first: 1000) {\n    edges {\n      node {\n        id\n        name\n        roaster_reviewsCollection {\n          edges {\n            node {\n              rating\n            }\n          }\n        }\n      }\n    }\n  }\n  beansCollection(first: 1000) {\n    edges {\n      node {\n        id\n        name\n        bean_reviewsCollection {\n          edges {\n            node {\n              rating\n            }\n          }\n        }\n      }\n    }\n  }\n  locationsCollection(first: 1000) {\n    edges {\n      node {\n        id\n        name\n        location_reviewsCollection {\n          edges {\n            node {\n              rating\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.GetDashboardStatsDocument,
    "query GetLocations($filter: locationsFilter, $first: Int, $after: Cursor) {\n  locationsCollection(filter: $filter, first: $first, after: $after) {\n    edges {\n      node {\n        id\n        name\n        description\n        image_url\n        address\n        latitude\n        longitude\n        url\n        instagram\n        claimed_by\n        created_at\n        is_published\n        location_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n        location_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}": types.GetLocationsDocument,
    "query GetProfile($id: UUID!) {\n  profilesCollection(filter: {id: {eq: $id}}) {\n    edges {\n      node {\n        id\n        username\n        display_name\n        bio\n        profile_image_url\n        location\n        instagram\n        url\n        created_at\n      }\n    }\n  }\n}": types.GetProfileDocument,
    "query GetRoaster($id: UUID!, $filter: roastersFilter) {\n  roastersCollection(filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        description\n        profile_image_url\n        location_city\n        location_state\n        location_country\n        url\n        instagram\n        claimed_by\n        is_published\n        beansCollection {\n          edges {\n            node {\n              id\n              name\n              description\n              origin\n              process\n              roast_level\n              average_rating\n              bean_likesCollection {\n                edges {\n                  node {\n                    id\n                    user_id\n                  }\n                }\n              }\n              bean_reviewsCollection {\n                edges {\n                  node {\n                    id\n                    rating\n                  }\n                }\n              }\n            }\n          }\n        }\n        created_at\n      }\n    }\n  }\n}": types.GetRoasterDocument,
    "query GetRoasters($filter: roastersFilter, $first: Int, $after: Cursor) {\n  roastersCollection(filter: $filter, first: $first, after: $after) {\n    edges {\n      node {\n        id\n        name\n        description\n        profile_image_url\n        location_city\n        location_state\n        location_country\n        url\n        instagram\n        claimed_by\n        created_at\n        is_published\n        beansCollection {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        roaster_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}": types.GetRoastersDocument,
    "query GetUserLikes($userId: UUID!, $first: Int, $after: Cursor) {\n  bean_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        beans {\n          id\n          name\n          roaster_id\n          process\n          image_url\n          roasters {\n            name\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  roaster_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        roasters {\n          id\n          name\n          profile_image_url\n          location_city\n          location_state\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  location_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        locations {\n          id\n          name\n          image_url\n          address\n          latitude\n          longitude\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}": types.GetUserLikesDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateBean($input: beansInsertInput!) {\n  insertIntobeansCollection(objects: [$input]) {\n    records {\n      id\n      name\n      description\n      image_url\n      roast_type\n      process\n      roast_level\n      bean_type\n      elevation_min\n      elevation_max\n      origin\n      producer\n      notes\n      buy_urls\n      roasters {\n        id\n      }\n    }\n  }\n}"): typeof import('./graphql').CreateBeanDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateRoaster($input: roastersInsertInput!) {\n  insertIntoroastersCollection(objects: [$input]) {\n    records {\n      id\n      name\n      description\n      profile_image_url\n      location_city\n      location_state\n      location_country\n      url\n      instagram\n      created_at\n    }\n  }\n}"): typeof import('./graphql').CreateRoasterDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation LikeBean($input: bean_likesInsertInput!) {\n  insertIntobean_likesCollection(objects: [$input]) {\n    records {\n      id\n      bean_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeBean($filter: bean_likesFilter!) {\n  deleteFrombean_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeRoaster($input: roaster_likesInsertInput!) {\n  insertIntoroaster_likesCollection(objects: [$input]) {\n    records {\n      id\n      roaster_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeRoaster($filter: roaster_likesFilter!) {\n  deleteFromroaster_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeLocation($input: location_likesInsertInput!) {\n  insertIntolocation_likesCollection(objects: [$input]) {\n    records {\n      id\n      location_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeLocation($filter: location_likesFilter!) {\n  deleteFromlocation_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}"): typeof import('./graphql').LikeBeanDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateBean($id: UUID!, $set: beansUpdateInput!) {\n  updatebeansCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      name\n      description\n      image_url\n      roast_type\n      process\n      roast_level\n      bean_type\n      elevation_min\n      elevation_max\n      origin\n      producer\n      notes\n      buy_urls\n      is_published\n      created_at\n      updated_at\n      roasters {\n        id\n        name\n      }\n    }\n  }\n}"): typeof import('./graphql').UpdateBeanDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateProfile($id: UUID!, $set: profilesUpdateInput!) {\n  updateprofilesCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      username\n      display_name\n      bio\n      profile_image_url\n      location\n      instagram\n      url\n      updated_at\n    }\n  }\n}"): typeof import('./graphql').UpdateProfileDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateRoaster($id: UUID!, $set: roastersUpdateInput!) {\n  updateroastersCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      name\n      description\n      profile_image_url\n      location_city\n      location_state\n      location_country\n      url\n      instagram\n      is_published\n      created_at\n      updated_at\n    }\n  }\n}"): typeof import('./graphql').UpdateRoasterDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetAllRoasters($first: Int) {\n  roastersCollection(\n    first: $first\n    orderBy: [{name: AscNullsLast}]\n    filter: {is_published: {eq: true}}\n  ) {\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}"): typeof import('./graphql').GetAllRoastersDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetBean($id: UUID!, $filter: beansFilter) {\n  beansCollection(filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        description\n        image_url\n        roast_type\n        process\n        roast_level\n        bean_type\n        elevation_min\n        elevation_max\n        origin\n        producer\n        notes\n        buy_urls\n        is_published\n        roasters {\n          id\n          name\n        }\n        bean_varietiesCollection {\n          edges {\n            node {\n              varieties {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_tagsCollection {\n          edges {\n            node {\n              tags {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n              content\n              coffee_type\n              profiles {\n                id\n                username\n                display_name\n                profile_image_url\n              }\n              created_at\n            }\n          }\n        }\n        created_at\n      }\n    }\n  }\n}"): typeof import('./graphql').GetBeanDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetBeans($filter: beansFilter, $first: Int, $after: Cursor) {\n  beansCollection(first: $first, after: $after, filter: $filter) {\n    edges {\n      cursor\n      node {\n        id\n        name\n        description\n        image_url\n        roast_type\n        process\n        roast_level\n        bean_type\n        elevation_min\n        elevation_max\n        origin\n        producer\n        notes\n        buy_urls\n        created_at\n        average_rating\n        is_published\n        roasters {\n          id\n          name\n        }\n        bean_varietiesCollection {\n          edges {\n            node {\n              varieties {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_tagsCollection {\n          edges {\n            node {\n              tags {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n        bean_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"): typeof import('./graphql').GetBeansDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetDashboardStats {\n  dashboard_statsCollection {\n    edges {\n      node {\n        id\n        total_users\n        total_beans\n        total_roasters\n        total_locations\n        total_bean_reviews\n        total_roaster_reviews\n        total_location_reviews\n      }\n    }\n  }\n  roastersCollection(first: 1000) {\n    edges {\n      node {\n        id\n        name\n        roaster_reviewsCollection {\n          edges {\n            node {\n              rating\n            }\n          }\n        }\n      }\n    }\n  }\n  beansCollection(first: 1000) {\n    edges {\n      node {\n        id\n        name\n        bean_reviewsCollection {\n          edges {\n            node {\n              rating\n            }\n          }\n        }\n      }\n    }\n  }\n  locationsCollection(first: 1000) {\n    edges {\n      node {\n        id\n        name\n        location_reviewsCollection {\n          edges {\n            node {\n              rating\n            }\n          }\n        }\n      }\n    }\n  }\n}"): typeof import('./graphql').GetDashboardStatsDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetLocations($filter: locationsFilter, $first: Int, $after: Cursor) {\n  locationsCollection(filter: $filter, first: $first, after: $after) {\n    edges {\n      node {\n        id\n        name\n        description\n        image_url\n        address\n        latitude\n        longitude\n        url\n        instagram\n        claimed_by\n        created_at\n        is_published\n        location_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n        location_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"): typeof import('./graphql').GetLocationsDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetProfile($id: UUID!) {\n  profilesCollection(filter: {id: {eq: $id}}) {\n    edges {\n      node {\n        id\n        username\n        display_name\n        bio\n        profile_image_url\n        location\n        instagram\n        url\n        created_at\n      }\n    }\n  }\n}"): typeof import('./graphql').GetProfileDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetRoaster($id: UUID!, $filter: roastersFilter) {\n  roastersCollection(filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        description\n        profile_image_url\n        location_city\n        location_state\n        location_country\n        url\n        instagram\n        claimed_by\n        is_published\n        beansCollection {\n          edges {\n            node {\n              id\n              name\n              description\n              origin\n              process\n              roast_level\n              average_rating\n              bean_likesCollection {\n                edges {\n                  node {\n                    id\n                    user_id\n                  }\n                }\n              }\n              bean_reviewsCollection {\n                edges {\n                  node {\n                    id\n                    rating\n                  }\n                }\n              }\n            }\n          }\n        }\n        created_at\n      }\n    }\n  }\n}"): typeof import('./graphql').GetRoasterDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetRoasters($filter: roastersFilter, $first: Int, $after: Cursor) {\n  roastersCollection(filter: $filter, first: $first, after: $after) {\n    edges {\n      node {\n        id\n        name\n        description\n        profile_image_url\n        location_city\n        location_state\n        location_country\n        url\n        instagram\n        claimed_by\n        created_at\n        is_published\n        beansCollection {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        roaster_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"): typeof import('./graphql').GetRoastersDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetUserLikes($userId: UUID!, $first: Int, $after: Cursor) {\n  bean_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        beans {\n          id\n          name\n          roaster_id\n          process\n          image_url\n          roasters {\n            name\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  roaster_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        roasters {\n          id\n          name\n          profile_image_url\n          location_city\n          location_state\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  location_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        locations {\n          id\n          name\n          image_url\n          address\n          latitude\n          longitude\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}"): typeof import('./graphql').GetUserLikesDocument;


export function gql(source: string) {
  return (documents as any)[source] ?? {};
}
