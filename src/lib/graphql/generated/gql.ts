/* eslint-disable */
import * as types from './graphql';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  'mutation CreateBean($input: beansInsertInput!) {\n  insertIntobeansCollection(objects: [$input]) {\n    records {\n      id\n      name\n      description\n      image_url\n      roast_type\n      process\n      roast_level\n      bean_type\n      elevation_min\n      elevation_max\n      origin\n      producer\n      notes\n      buy_urls\n      status\n      roasters {\n        id\n      }\n    }\n  }\n}': typeof types.CreateBeanDocument;
  'mutation CreateBeanReview($input: bean_reviewsInsertInput!) {\n  insertIntobean_reviewsCollection(objects: [$input]) {\n    records {\n      id\n      user_id\n      bean_id\n      rating\n      content\n      created_at\n    }\n  }\n}': typeof types.CreateBeanReviewDocument;
  'mutation CreateCuratedHomepageItem($input: [homepage_curated_itemsInsertInput!]!) {\n  insertIntohomepage_curated_itemsCollection(objects: $input) {\n    records {\n      id\n      section\n      bean_id\n      recipe_id\n      roaster_id\n      location_id\n      display_order\n      custom_title\n      published\n      created_at\n      updated_at\n    }\n  }\n}': typeof types.CreateCuratedHomepageItemDocument;
  'mutation CreateRecipe($input: recipesInsertInput!) {\n  insertIntorecipesCollection(objects: [$input]) {\n    records {\n      id\n      user_id\n      bean_id\n      title\n      description\n      image_url\n      grind_size\n      grind_weight\n      ratio\n      brew_method\n      is_public\n      likes_count\n      created_at\n    }\n  }\n}': typeof types.CreateRecipeDocument;
  'mutation CreateRoaster($input: roastersInsertInput!) {\n  insertIntoroastersCollection(objects: [$input]) {\n    records {\n      id\n      name\n      description\n      profile_image_url\n      logo_url\n      location_city\n      location_state\n      location_country\n      url\n      instagram\n      created_at\n    }\n  }\n}': typeof types.CreateRoasterDocument;
  'mutation DeleteBean($id: UUID!) {\n  deleteFrombeansCollection(filter: {id: {eq: $id}}) {\n    records {\n      id\n    }\n  }\n}': typeof types.DeleteBeanDocument;
  'mutation DeleteCuratedHomepageItem($filter: homepage_curated_itemsFilter!) {\n  deleteFromhomepage_curated_itemsCollection(filter: $filter) {\n    affectedCount\n  }\n}': typeof types.DeleteCuratedHomepageItemDocument;
  'mutation LikeBean($input: bean_likesInsertInput!) {\n  insertIntobean_likesCollection(objects: [$input]) {\n    records {\n      id\n      bean_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeBean($filter: bean_likesFilter!) {\n  deleteFrombean_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeRoaster($input: roaster_likesInsertInput!) {\n  insertIntoroaster_likesCollection(objects: [$input]) {\n    records {\n      id\n      roaster_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeRoaster($filter: roaster_likesFilter!) {\n  deleteFromroaster_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeLocation($input: location_likesInsertInput!) {\n  insertIntolocation_likesCollection(objects: [$input]) {\n    records {\n      id\n      location_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeLocation($filter: location_likesFilter!) {\n  deleteFromlocation_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeRecipe($input: recipe_likesInsertInput!) {\n  insertIntorecipe_likesCollection(objects: [$input]) {\n    records {\n      id\n      recipe_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeRecipe($filter: recipe_likesFilter!) {\n  deleteFromrecipe_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}': typeof types.LikeBeanDocument;
  'mutation UpdateBean($id: UUID!, $set: beansUpdateInput!) {\n  updatebeansCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      name\n      description\n      image_url\n      roast_type\n      process\n      roast_level\n      bean_type\n      elevation_min\n      elevation_max\n      origin\n      producer\n      notes\n      buy_urls\n      status\n      created_at\n      updated_at\n      roasters {\n        id\n        name\n      }\n    }\n  }\n}': typeof types.UpdateBeanDocument;
  'mutation UpdateBeanStatus($id: UUID!, $status: bean_status!) {\n  updatebeansCollection(filter: {id: {eq: $id}}, set: {status: $status}) {\n    affectedCount\n    records {\n      id\n      name\n      status\n      is_published\n      created_at\n      updated_at\n    }\n  }\n}': typeof types.UpdateBeanStatusDocument;
  'mutation UpdateCuratedHomepageItem($filter: homepage_curated_itemsFilter!, $set: homepage_curated_itemsUpdateInput!) {\n  updatehomepage_curated_itemsCollection(filter: $filter, set: $set) {\n    records {\n      id\n      section\n      bean_id\n      recipe_id\n      roaster_id\n      location_id\n      display_order\n      custom_title\n      published\n      created_at\n      updated_at\n    }\n  }\n}': typeof types.UpdateCuratedHomepageItemDocument;
  'mutation UpdateProfile($id: UUID!, $set: profilesUpdateInput!) {\n  updateprofilesCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      username\n      display_name\n      bio\n      profile_image_url\n      location\n      instagram\n      url\n      updated_at\n    }\n  }\n}': typeof types.UpdateProfileDocument;
  'mutation UpdateRecipe($id: UUID!, $set: recipesUpdateInput!) {\n  updaterecipesCollection(filter: {id: {eq: $id}}, set: $set) {\n    records {\n      id\n      user_id\n      bean_id\n      title\n      description\n      image_url\n      grind_size\n      grind_weight\n      ratio\n      brew_method\n      is_public\n      likes_count\n      created_at\n    }\n  }\n}': typeof types.UpdateRecipeDocument;
  'mutation UpdateRoaster($id: UUID!, $set: roastersUpdateInput!) {\n  updateroastersCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      name\n      description\n      profile_image_url\n      logo_url\n      location_city\n      location_state\n      location_country\n      url\n      instagram\n      is_published\n      created_at\n      updated_at\n    }\n  }\n}': typeof types.UpdateRoasterDocument;
  'query GetCuratedHomepageItems {\n  homepage_curated_itemsCollection(orderBy: {display_order: AscNullsLast}) {\n    edges {\n      node {\n        id\n        nodeId\n        section\n        display_order\n        custom_title\n        published\n        created_at\n        updated_at\n        bean_id\n        recipe_id\n        roaster_id\n        location_id\n        beans {\n          id\n          slug\n          name\n          average_rating\n          review_count\n          status\n          origin\n          roasters {\n            id\n            name\n          }\n        }\n        recipes {\n          id\n          slug\n          title\n          description\n          image_url\n          is_public\n          likes_count\n        }\n        roasters {\n          id\n          slug\n          name\n          bean_count\n          is_published\n          location_city\n          location_state\n          location_country\n          created_at\n          beanCount: bean_count\n          roaster_likesCollection {\n            edges {\n              node {\n                id\n                user_id\n              }\n            }\n          }\n        }\n        locations {\n          id\n          slug\n          name\n        }\n      }\n    }\n  }\n}': typeof types.GetCuratedHomepageItemsDocument;
  'query GetRecipeById($id: UUID!) {\n  recipesCollection(filter: {id: {eq: $id}}) {\n    edges {\n      node {\n        id\n        slug\n        user_id\n        profiles {\n          id\n          username\n          display_name\n        }\n        bean_id\n        title\n        description\n        image_url\n        grind_size\n        grind_weight\n        ratio\n        brew_method\n        is_public\n        likes_count\n        created_at\n        bean: beans {\n          id\n          name\n          roasters {\n            id\n            name\n          }\n        }\n        likes: recipe_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n  }\n}': typeof types.GetRecipeByIdDocument;
  'query GetRecipes($first: Int, $after: Cursor) {\n  recipesCollection(first: $first, after: $after, filter: {is_public: {eq: true}}) {\n    edges {\n      node {\n        id\n        slug\n        user_id\n        profiles {\n          id\n          username\n          display_name\n        }\n        bean_id\n        title\n        description\n        image_url\n        grind_size\n        grind_weight\n        ratio\n        brew_method\n        is_public\n        likes_count\n        created_at\n        likes: recipe_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}': typeof types.GetRecipesDocument;
  'query GetAllRoasters($first: Int) {\n  roastersCollection(\n    first: $first\n    orderBy: [{name: AscNullsLast}]\n    filter: {is_published: {eq: true}}\n  ) {\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}': typeof types.GetAllRoastersDocument;
  'query GetBean($id: UUID!, $filter: beansFilter) {\n  beansCollection(filter: $filter) {\n    edges {\n      node {\n        id\n        slug\n        name\n        description\n        image_url\n        roast_type\n        process\n        roast_level\n        bean_type\n        elevation_min\n        elevation_max\n        origin\n        producer\n        notes\n        buy_urls\n        status\n        average_rating\n        review_count\n        roasters {\n          id\n          slug\n          name\n        }\n        bean_varietiesCollection {\n          edges {\n            node {\n              varieties {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_tagsCollection {\n          edges {\n            node {\n              tags {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n              content\n              coffee_type\n              profiles {\n                id\n                username\n                display_name\n                profile_image_url\n              }\n              created_at\n            }\n          }\n        }\n        created_at\n      }\n    }\n  }\n}': typeof types.GetBeanDocument;
  'query GetBeanOptions($search: String, $first: Int, $after: Cursor) {\n  beansCollection(\n    first: $first\n    after: $after\n    filter: {name: {ilike: $search}}\n    orderBy: [{roaster_id: AscNullsLast}, {name: AscNullsLast}]\n  ) {\n    edges {\n      node {\n        id\n        name\n        roasters {\n          id\n          name\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}': typeof types.GetBeanOptionsDocument;
  'query GetBeans($filter: beansFilter, $first: Int, $after: Cursor, $orderBy: [beansOrderBy!]) {\n  beansCollection(\n    first: $first\n    after: $after\n    filter: $filter\n    orderBy: $orderBy\n  ) {\n    edges {\n      cursor\n      node {\n        id\n        slug\n        name\n        image_url\n        roast_type\n        process\n        roast_level\n        origin\n        created_at\n        average_rating\n        review_count\n        status\n        roasters {\n          id\n          name\n          slug\n        }\n        bean_tagsCollection {\n          edges {\n            node {\n              tags {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}': typeof types.GetBeansDocument;
  'query GetDashboardStats {\n  dashboard_statsCollection {\n    edges {\n      node {\n        id\n        total_users\n        total_beans\n        total_roasters\n        total_locations\n        total_bean_reviews\n        total_recipes\n        total_location_reviews\n      }\n    }\n  }\n  roastersCollection(first: 10, orderBy: [{average_rating: DescNullsLast}]) {\n    edges {\n      node {\n        id\n        name\n        average_rating\n        review_count\n        bean_count\n      }\n    }\n  }\n  beansCollection(first: 10, orderBy: [{average_rating: DescNullsLast}]) {\n    edges {\n      node {\n        id\n        name\n        average_rating\n        review_count\n      }\n    }\n  }\n  locationsCollection(first: 10, orderBy: [{average_rating: DescNullsLast}]) {\n    edges {\n      node {\n        id\n        name\n        average_rating\n        review_count\n      }\n    }\n  }\n}': typeof types.GetDashboardStatsDocument;
  'query GetLocations($filter: locationsFilter, $first: Int, $after: Cursor) {\n  locationsCollection(filter: $filter, first: $first, after: $after) {\n    edges {\n      node {\n        id\n        slug\n        name\n        description\n        image_url\n        address\n        latitude\n        longitude\n        url\n        instagram\n        claimed_by\n        created_at\n        is_published\n        location_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n        location_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}': typeof types.GetLocationsDocument;
  'query GetMostLikedRoasters($first: Int) {\n  roastersCollection(\n    first: $first\n    orderBy: [{likes_count: DescNullsLast}]\n    filter: {is_published: {eq: true}}\n  ) {\n    edges {\n      node {\n        id\n        slug\n        name\n        profile_image_url\n        logo_url\n        location_city\n        location_state\n        location_country\n        bean_count\n        likes_count\n        created_at\n        is_published\n        roaster_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}': typeof types.GetMostLikedRoastersDocument;
  'query GetProfile($id: UUID!) {\n  profilesCollection(filter: {id: {eq: $id}}) {\n    edges {\n      node {\n        id\n        username\n        display_name\n        bio\n        profile_image_url\n        location\n        instagram\n        url\n        created_at\n      }\n    }\n  }\n}': typeof types.GetProfileDocument;
  'query GetRoaster($id: UUID!, $filter: roastersFilter) {\n  roastersCollection(filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        slug\n        description\n        profile_image_url\n        logo_url\n        location_city\n        location_state\n        location_country\n        url\n        instagram\n        claimed_by\n        is_published\n        roaster_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n        beansCollection {\n          edges {\n            node {\n              id\n              slug\n              name\n              description\n              origin\n              process\n              roast_level\n              average_rating\n              created_at\n              status\n              bean_likesCollection {\n                edges {\n                  node {\n                    id\n                    user_id\n                  }\n                }\n              }\n              bean_reviewsCollection {\n                edges {\n                  node {\n                    id\n                    rating\n                  }\n                }\n              }\n            }\n          }\n        }\n        created_at\n      }\n    }\n  }\n}': typeof types.GetRoasterDocument;
  'query GetRoasters($filter: roastersFilter, $first: Int, $after: Cursor, $orderBy: [roastersOrderBy!]) {\n  roastersCollection(\n    filter: $filter\n    first: $first\n    after: $after\n    orderBy: $orderBy\n  ) {\n    edges {\n      node {\n        id\n        slug\n        name\n        profile_image_url\n        logo_url\n        location_city\n        location_state\n        location_country\n        claimed_by\n        created_at\n        is_published\n        bean_count\n        roaster_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}': typeof types.GetRoastersDocument;
  'query GetUserLikes($userId: UUID!, $first: Int, $after: Cursor) {\n  bean_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        beans {\n          id\n          slug\n          name\n          roaster_id\n          process\n          image_url\n          roasters {\n            name\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  roaster_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        roasters {\n          id\n          slug\n          name\n          profile_image_url\n          location_city\n          location_state\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  location_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        locations {\n          id\n          slug\n          name\n          image_url\n          address\n          latitude\n          longitude\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  recipe_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        recipes {\n          id\n          slug\n          title\n          image_url\n          created_at\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}': typeof types.GetUserLikesDocument;
};
const documents: Documents = {
  'mutation CreateBean($input: beansInsertInput!) {\n  insertIntobeansCollection(objects: [$input]) {\n    records {\n      id\n      name\n      description\n      image_url\n      roast_type\n      process\n      roast_level\n      bean_type\n      elevation_min\n      elevation_max\n      origin\n      producer\n      notes\n      buy_urls\n      status\n      roasters {\n        id\n      }\n    }\n  }\n}':
    types.CreateBeanDocument,
  'mutation CreateBeanReview($input: bean_reviewsInsertInput!) {\n  insertIntobean_reviewsCollection(objects: [$input]) {\n    records {\n      id\n      user_id\n      bean_id\n      rating\n      content\n      created_at\n    }\n  }\n}':
    types.CreateBeanReviewDocument,
  'mutation CreateCuratedHomepageItem($input: [homepage_curated_itemsInsertInput!]!) {\n  insertIntohomepage_curated_itemsCollection(objects: $input) {\n    records {\n      id\n      section\n      bean_id\n      recipe_id\n      roaster_id\n      location_id\n      display_order\n      custom_title\n      published\n      created_at\n      updated_at\n    }\n  }\n}':
    types.CreateCuratedHomepageItemDocument,
  'mutation CreateRecipe($input: recipesInsertInput!) {\n  insertIntorecipesCollection(objects: [$input]) {\n    records {\n      id\n      user_id\n      bean_id\n      title\n      description\n      image_url\n      grind_size\n      grind_weight\n      ratio\n      brew_method\n      is_public\n      likes_count\n      created_at\n    }\n  }\n}':
    types.CreateRecipeDocument,
  'mutation CreateRoaster($input: roastersInsertInput!) {\n  insertIntoroastersCollection(objects: [$input]) {\n    records {\n      id\n      name\n      description\n      profile_image_url\n      logo_url\n      location_city\n      location_state\n      location_country\n      url\n      instagram\n      created_at\n    }\n  }\n}':
    types.CreateRoasterDocument,
  'mutation DeleteBean($id: UUID!) {\n  deleteFrombeansCollection(filter: {id: {eq: $id}}) {\n    records {\n      id\n    }\n  }\n}':
    types.DeleteBeanDocument,
  'mutation DeleteCuratedHomepageItem($filter: homepage_curated_itemsFilter!) {\n  deleteFromhomepage_curated_itemsCollection(filter: $filter) {\n    affectedCount\n  }\n}':
    types.DeleteCuratedHomepageItemDocument,
  'mutation LikeBean($input: bean_likesInsertInput!) {\n  insertIntobean_likesCollection(objects: [$input]) {\n    records {\n      id\n      bean_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeBean($filter: bean_likesFilter!) {\n  deleteFrombean_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeRoaster($input: roaster_likesInsertInput!) {\n  insertIntoroaster_likesCollection(objects: [$input]) {\n    records {\n      id\n      roaster_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeRoaster($filter: roaster_likesFilter!) {\n  deleteFromroaster_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeLocation($input: location_likesInsertInput!) {\n  insertIntolocation_likesCollection(objects: [$input]) {\n    records {\n      id\n      location_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeLocation($filter: location_likesFilter!) {\n  deleteFromlocation_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeRecipe($input: recipe_likesInsertInput!) {\n  insertIntorecipe_likesCollection(objects: [$input]) {\n    records {\n      id\n      recipe_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeRecipe($filter: recipe_likesFilter!) {\n  deleteFromrecipe_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}':
    types.LikeBeanDocument,
  'mutation UpdateBean($id: UUID!, $set: beansUpdateInput!) {\n  updatebeansCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      name\n      description\n      image_url\n      roast_type\n      process\n      roast_level\n      bean_type\n      elevation_min\n      elevation_max\n      origin\n      producer\n      notes\n      buy_urls\n      status\n      created_at\n      updated_at\n      roasters {\n        id\n        name\n      }\n    }\n  }\n}':
    types.UpdateBeanDocument,
  'mutation UpdateBeanStatus($id: UUID!, $status: bean_status!) {\n  updatebeansCollection(filter: {id: {eq: $id}}, set: {status: $status}) {\n    affectedCount\n    records {\n      id\n      name\n      status\n      is_published\n      created_at\n      updated_at\n    }\n  }\n}':
    types.UpdateBeanStatusDocument,
  'mutation UpdateCuratedHomepageItem($filter: homepage_curated_itemsFilter!, $set: homepage_curated_itemsUpdateInput!) {\n  updatehomepage_curated_itemsCollection(filter: $filter, set: $set) {\n    records {\n      id\n      section\n      bean_id\n      recipe_id\n      roaster_id\n      location_id\n      display_order\n      custom_title\n      published\n      created_at\n      updated_at\n    }\n  }\n}':
    types.UpdateCuratedHomepageItemDocument,
  'mutation UpdateProfile($id: UUID!, $set: profilesUpdateInput!) {\n  updateprofilesCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      username\n      display_name\n      bio\n      profile_image_url\n      location\n      instagram\n      url\n      updated_at\n    }\n  }\n}':
    types.UpdateProfileDocument,
  'mutation UpdateRecipe($id: UUID!, $set: recipesUpdateInput!) {\n  updaterecipesCollection(filter: {id: {eq: $id}}, set: $set) {\n    records {\n      id\n      user_id\n      bean_id\n      title\n      description\n      image_url\n      grind_size\n      grind_weight\n      ratio\n      brew_method\n      is_public\n      likes_count\n      created_at\n    }\n  }\n}':
    types.UpdateRecipeDocument,
  'mutation UpdateRoaster($id: UUID!, $set: roastersUpdateInput!) {\n  updateroastersCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      name\n      description\n      profile_image_url\n      logo_url\n      location_city\n      location_state\n      location_country\n      url\n      instagram\n      is_published\n      created_at\n      updated_at\n    }\n  }\n}':
    types.UpdateRoasterDocument,
  'query GetCuratedHomepageItems {\n  homepage_curated_itemsCollection(orderBy: {display_order: AscNullsLast}) {\n    edges {\n      node {\n        id\n        nodeId\n        section\n        display_order\n        custom_title\n        published\n        created_at\n        updated_at\n        bean_id\n        recipe_id\n        roaster_id\n        location_id\n        beans {\n          id\n          slug\n          name\n          average_rating\n          review_count\n          status\n          origin\n          roasters {\n            id\n            name\n          }\n        }\n        recipes {\n          id\n          slug\n          title\n          description\n          image_url\n          is_public\n          likes_count\n        }\n        roasters {\n          id\n          slug\n          name\n          bean_count\n          is_published\n          location_city\n          location_state\n          location_country\n          created_at\n          beanCount: bean_count\n          roaster_likesCollection {\n            edges {\n              node {\n                id\n                user_id\n              }\n            }\n          }\n        }\n        locations {\n          id\n          slug\n          name\n        }\n      }\n    }\n  }\n}':
    types.GetCuratedHomepageItemsDocument,
  'query GetRecipeById($id: UUID!) {\n  recipesCollection(filter: {id: {eq: $id}}) {\n    edges {\n      node {\n        id\n        slug\n        user_id\n        profiles {\n          id\n          username\n          display_name\n        }\n        bean_id\n        title\n        description\n        image_url\n        grind_size\n        grind_weight\n        ratio\n        brew_method\n        is_public\n        likes_count\n        created_at\n        bean: beans {\n          id\n          name\n          roasters {\n            id\n            name\n          }\n        }\n        likes: recipe_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n  }\n}':
    types.GetRecipeByIdDocument,
  'query GetRecipes($first: Int, $after: Cursor) {\n  recipesCollection(first: $first, after: $after, filter: {is_public: {eq: true}}) {\n    edges {\n      node {\n        id\n        slug\n        user_id\n        profiles {\n          id\n          username\n          display_name\n        }\n        bean_id\n        title\n        description\n        image_url\n        grind_size\n        grind_weight\n        ratio\n        brew_method\n        is_public\n        likes_count\n        created_at\n        likes: recipe_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}':
    types.GetRecipesDocument,
  'query GetAllRoasters($first: Int) {\n  roastersCollection(\n    first: $first\n    orderBy: [{name: AscNullsLast}]\n    filter: {is_published: {eq: true}}\n  ) {\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}':
    types.GetAllRoastersDocument,
  'query GetBean($id: UUID!, $filter: beansFilter) {\n  beansCollection(filter: $filter) {\n    edges {\n      node {\n        id\n        slug\n        name\n        description\n        image_url\n        roast_type\n        process\n        roast_level\n        bean_type\n        elevation_min\n        elevation_max\n        origin\n        producer\n        notes\n        buy_urls\n        status\n        average_rating\n        review_count\n        roasters {\n          id\n          slug\n          name\n        }\n        bean_varietiesCollection {\n          edges {\n            node {\n              varieties {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_tagsCollection {\n          edges {\n            node {\n              tags {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n              content\n              coffee_type\n              profiles {\n                id\n                username\n                display_name\n                profile_image_url\n              }\n              created_at\n            }\n          }\n        }\n        created_at\n      }\n    }\n  }\n}':
    types.GetBeanDocument,
  'query GetBeanOptions($search: String, $first: Int, $after: Cursor) {\n  beansCollection(\n    first: $first\n    after: $after\n    filter: {name: {ilike: $search}}\n    orderBy: [{roaster_id: AscNullsLast}, {name: AscNullsLast}]\n  ) {\n    edges {\n      node {\n        id\n        name\n        roasters {\n          id\n          name\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}':
    types.GetBeanOptionsDocument,
  'query GetBeans($filter: beansFilter, $first: Int, $after: Cursor, $orderBy: [beansOrderBy!]) {\n  beansCollection(\n    first: $first\n    after: $after\n    filter: $filter\n    orderBy: $orderBy\n  ) {\n    edges {\n      cursor\n      node {\n        id\n        slug\n        name\n        image_url\n        roast_type\n        process\n        roast_level\n        origin\n        created_at\n        average_rating\n        review_count\n        status\n        roasters {\n          id\n          name\n          slug\n        }\n        bean_tagsCollection {\n          edges {\n            node {\n              tags {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}':
    types.GetBeansDocument,
  'query GetDashboardStats {\n  dashboard_statsCollection {\n    edges {\n      node {\n        id\n        total_users\n        total_beans\n        total_roasters\n        total_locations\n        total_bean_reviews\n        total_recipes\n        total_location_reviews\n      }\n    }\n  }\n  roastersCollection(first: 10, orderBy: [{average_rating: DescNullsLast}]) {\n    edges {\n      node {\n        id\n        name\n        average_rating\n        review_count\n        bean_count\n      }\n    }\n  }\n  beansCollection(first: 10, orderBy: [{average_rating: DescNullsLast}]) {\n    edges {\n      node {\n        id\n        name\n        average_rating\n        review_count\n      }\n    }\n  }\n  locationsCollection(first: 10, orderBy: [{average_rating: DescNullsLast}]) {\n    edges {\n      node {\n        id\n        name\n        average_rating\n        review_count\n      }\n    }\n  }\n}':
    types.GetDashboardStatsDocument,
  'query GetLocations($filter: locationsFilter, $first: Int, $after: Cursor) {\n  locationsCollection(filter: $filter, first: $first, after: $after) {\n    edges {\n      node {\n        id\n        slug\n        name\n        description\n        image_url\n        address\n        latitude\n        longitude\n        url\n        instagram\n        claimed_by\n        created_at\n        is_published\n        location_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n        location_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}':
    types.GetLocationsDocument,
  'query GetMostLikedRoasters($first: Int) {\n  roastersCollection(\n    first: $first\n    orderBy: [{likes_count: DescNullsLast}]\n    filter: {is_published: {eq: true}}\n  ) {\n    edges {\n      node {\n        id\n        slug\n        name\n        profile_image_url\n        logo_url\n        location_city\n        location_state\n        location_country\n        bean_count\n        likes_count\n        created_at\n        is_published\n        roaster_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}':
    types.GetMostLikedRoastersDocument,
  'query GetProfile($id: UUID!) {\n  profilesCollection(filter: {id: {eq: $id}}) {\n    edges {\n      node {\n        id\n        username\n        display_name\n        bio\n        profile_image_url\n        location\n        instagram\n        url\n        created_at\n      }\n    }\n  }\n}':
    types.GetProfileDocument,
  'query GetRoaster($id: UUID!, $filter: roastersFilter) {\n  roastersCollection(filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        slug\n        description\n        profile_image_url\n        logo_url\n        location_city\n        location_state\n        location_country\n        url\n        instagram\n        claimed_by\n        is_published\n        roaster_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n        beansCollection {\n          edges {\n            node {\n              id\n              slug\n              name\n              description\n              origin\n              process\n              roast_level\n              average_rating\n              created_at\n              status\n              bean_likesCollection {\n                edges {\n                  node {\n                    id\n                    user_id\n                  }\n                }\n              }\n              bean_reviewsCollection {\n                edges {\n                  node {\n                    id\n                    rating\n                  }\n                }\n              }\n            }\n          }\n        }\n        created_at\n      }\n    }\n  }\n}':
    types.GetRoasterDocument,
  'query GetRoasters($filter: roastersFilter, $first: Int, $after: Cursor, $orderBy: [roastersOrderBy!]) {\n  roastersCollection(\n    filter: $filter\n    first: $first\n    after: $after\n    orderBy: $orderBy\n  ) {\n    edges {\n      node {\n        id\n        slug\n        name\n        profile_image_url\n        logo_url\n        location_city\n        location_state\n        location_country\n        claimed_by\n        created_at\n        is_published\n        bean_count\n        roaster_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}':
    types.GetRoastersDocument,
  'query GetUserLikes($userId: UUID!, $first: Int, $after: Cursor) {\n  bean_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        beans {\n          id\n          slug\n          name\n          roaster_id\n          process\n          image_url\n          roasters {\n            name\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  roaster_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        roasters {\n          id\n          slug\n          name\n          profile_image_url\n          location_city\n          location_state\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  location_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        locations {\n          id\n          slug\n          name\n          image_url\n          address\n          latitude\n          longitude\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  recipe_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        recipes {\n          id\n          slug\n          title\n          image_url\n          created_at\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}':
    types.GetUserLikesDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation CreateBean($input: beansInsertInput!) {\n  insertIntobeansCollection(objects: [$input]) {\n    records {\n      id\n      name\n      description\n      image_url\n      roast_type\n      process\n      roast_level\n      bean_type\n      elevation_min\n      elevation_max\n      origin\n      producer\n      notes\n      buy_urls\n      status\n      roasters {\n        id\n      }\n    }\n  }\n}'
): typeof import('./graphql').CreateBeanDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation CreateBeanReview($input: bean_reviewsInsertInput!) {\n  insertIntobean_reviewsCollection(objects: [$input]) {\n    records {\n      id\n      user_id\n      bean_id\n      rating\n      content\n      created_at\n    }\n  }\n}'
): typeof import('./graphql').CreateBeanReviewDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation CreateCuratedHomepageItem($input: [homepage_curated_itemsInsertInput!]!) {\n  insertIntohomepage_curated_itemsCollection(objects: $input) {\n    records {\n      id\n      section\n      bean_id\n      recipe_id\n      roaster_id\n      location_id\n      display_order\n      custom_title\n      published\n      created_at\n      updated_at\n    }\n  }\n}'
): typeof import('./graphql').CreateCuratedHomepageItemDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation CreateRecipe($input: recipesInsertInput!) {\n  insertIntorecipesCollection(objects: [$input]) {\n    records {\n      id\n      user_id\n      bean_id\n      title\n      description\n      image_url\n      grind_size\n      grind_weight\n      ratio\n      brew_method\n      is_public\n      likes_count\n      created_at\n    }\n  }\n}'
): typeof import('./graphql').CreateRecipeDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation CreateRoaster($input: roastersInsertInput!) {\n  insertIntoroastersCollection(objects: [$input]) {\n    records {\n      id\n      name\n      description\n      profile_image_url\n      logo_url\n      location_city\n      location_state\n      location_country\n      url\n      instagram\n      created_at\n    }\n  }\n}'
): typeof import('./graphql').CreateRoasterDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation DeleteBean($id: UUID!) {\n  deleteFrombeansCollection(filter: {id: {eq: $id}}) {\n    records {\n      id\n    }\n  }\n}'
): typeof import('./graphql').DeleteBeanDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation DeleteCuratedHomepageItem($filter: homepage_curated_itemsFilter!) {\n  deleteFromhomepage_curated_itemsCollection(filter: $filter) {\n    affectedCount\n  }\n}'
): typeof import('./graphql').DeleteCuratedHomepageItemDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation LikeBean($input: bean_likesInsertInput!) {\n  insertIntobean_likesCollection(objects: [$input]) {\n    records {\n      id\n      bean_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeBean($filter: bean_likesFilter!) {\n  deleteFrombean_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeRoaster($input: roaster_likesInsertInput!) {\n  insertIntoroaster_likesCollection(objects: [$input]) {\n    records {\n      id\n      roaster_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeRoaster($filter: roaster_likesFilter!) {\n  deleteFromroaster_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeLocation($input: location_likesInsertInput!) {\n  insertIntolocation_likesCollection(objects: [$input]) {\n    records {\n      id\n      location_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeLocation($filter: location_likesFilter!) {\n  deleteFromlocation_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}\n\nmutation LikeRecipe($input: recipe_likesInsertInput!) {\n  insertIntorecipe_likesCollection(objects: [$input]) {\n    records {\n      id\n      recipe_id\n      user_id\n      created_at\n    }\n  }\n}\n\nmutation UnlikeRecipe($filter: recipe_likesFilter!) {\n  deleteFromrecipe_likesCollection(filter: $filter) {\n    records {\n      id\n    }\n  }\n}'
): typeof import('./graphql').LikeBeanDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation UpdateBean($id: UUID!, $set: beansUpdateInput!) {\n  updatebeansCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      name\n      description\n      image_url\n      roast_type\n      process\n      roast_level\n      bean_type\n      elevation_min\n      elevation_max\n      origin\n      producer\n      notes\n      buy_urls\n      status\n      created_at\n      updated_at\n      roasters {\n        id\n        name\n      }\n    }\n  }\n}'
): typeof import('./graphql').UpdateBeanDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation UpdateBeanStatus($id: UUID!, $status: bean_status!) {\n  updatebeansCollection(filter: {id: {eq: $id}}, set: {status: $status}) {\n    affectedCount\n    records {\n      id\n      name\n      status\n      is_published\n      created_at\n      updated_at\n    }\n  }\n}'
): typeof import('./graphql').UpdateBeanStatusDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation UpdateCuratedHomepageItem($filter: homepage_curated_itemsFilter!, $set: homepage_curated_itemsUpdateInput!) {\n  updatehomepage_curated_itemsCollection(filter: $filter, set: $set) {\n    records {\n      id\n      section\n      bean_id\n      recipe_id\n      roaster_id\n      location_id\n      display_order\n      custom_title\n      published\n      created_at\n      updated_at\n    }\n  }\n}'
): typeof import('./graphql').UpdateCuratedHomepageItemDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation UpdateProfile($id: UUID!, $set: profilesUpdateInput!) {\n  updateprofilesCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      username\n      display_name\n      bio\n      profile_image_url\n      location\n      instagram\n      url\n      updated_at\n    }\n  }\n}'
): typeof import('./graphql').UpdateProfileDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation UpdateRecipe($id: UUID!, $set: recipesUpdateInput!) {\n  updaterecipesCollection(filter: {id: {eq: $id}}, set: $set) {\n    records {\n      id\n      user_id\n      bean_id\n      title\n      description\n      image_url\n      grind_size\n      grind_weight\n      ratio\n      brew_method\n      is_public\n      likes_count\n      created_at\n    }\n  }\n}'
): typeof import('./graphql').UpdateRecipeDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'mutation UpdateRoaster($id: UUID!, $set: roastersUpdateInput!) {\n  updateroastersCollection(filter: {id: {eq: $id}}, set: $set) {\n    affectedCount\n    records {\n      id\n      name\n      description\n      profile_image_url\n      logo_url\n      location_city\n      location_state\n      location_country\n      url\n      instagram\n      is_published\n      created_at\n      updated_at\n    }\n  }\n}'
): typeof import('./graphql').UpdateRoasterDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetCuratedHomepageItems {\n  homepage_curated_itemsCollection(orderBy: {display_order: AscNullsLast}) {\n    edges {\n      node {\n        id\n        nodeId\n        section\n        display_order\n        custom_title\n        published\n        created_at\n        updated_at\n        bean_id\n        recipe_id\n        roaster_id\n        location_id\n        beans {\n          id\n          slug\n          name\n          average_rating\n          review_count\n          status\n          origin\n          roasters {\n            id\n            name\n          }\n        }\n        recipes {\n          id\n          slug\n          title\n          description\n          image_url\n          is_public\n          likes_count\n        }\n        roasters {\n          id\n          slug\n          name\n          bean_count\n          is_published\n          location_city\n          location_state\n          location_country\n          created_at\n          beanCount: bean_count\n          roaster_likesCollection {\n            edges {\n              node {\n                id\n                user_id\n              }\n            }\n          }\n        }\n        locations {\n          id\n          slug\n          name\n        }\n      }\n    }\n  }\n}'
): typeof import('./graphql').GetCuratedHomepageItemsDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetRecipeById($id: UUID!) {\n  recipesCollection(filter: {id: {eq: $id}}) {\n    edges {\n      node {\n        id\n        slug\n        user_id\n        profiles {\n          id\n          username\n          display_name\n        }\n        bean_id\n        title\n        description\n        image_url\n        grind_size\n        grind_weight\n        ratio\n        brew_method\n        is_public\n        likes_count\n        created_at\n        bean: beans {\n          id\n          name\n          roasters {\n            id\n            name\n          }\n        }\n        likes: recipe_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n  }\n}'
): typeof import('./graphql').GetRecipeByIdDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetRecipes($first: Int, $after: Cursor) {\n  recipesCollection(first: $first, after: $after, filter: {is_public: {eq: true}}) {\n    edges {\n      node {\n        id\n        slug\n        user_id\n        profiles {\n          id\n          username\n          display_name\n        }\n        bean_id\n        title\n        description\n        image_url\n        grind_size\n        grind_weight\n        ratio\n        brew_method\n        is_public\n        likes_count\n        created_at\n        likes: recipe_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}'
): typeof import('./graphql').GetRecipesDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetAllRoasters($first: Int) {\n  roastersCollection(\n    first: $first\n    orderBy: [{name: AscNullsLast}]\n    filter: {is_published: {eq: true}}\n  ) {\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}'
): typeof import('./graphql').GetAllRoastersDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetBean($id: UUID!, $filter: beansFilter) {\n  beansCollection(filter: $filter) {\n    edges {\n      node {\n        id\n        slug\n        name\n        description\n        image_url\n        roast_type\n        process\n        roast_level\n        bean_type\n        elevation_min\n        elevation_max\n        origin\n        producer\n        notes\n        buy_urls\n        status\n        average_rating\n        review_count\n        roasters {\n          id\n          slug\n          name\n        }\n        bean_varietiesCollection {\n          edges {\n            node {\n              varieties {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_tagsCollection {\n          edges {\n            node {\n              tags {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n              content\n              coffee_type\n              profiles {\n                id\n                username\n                display_name\n                profile_image_url\n              }\n              created_at\n            }\n          }\n        }\n        created_at\n      }\n    }\n  }\n}'
): typeof import('./graphql').GetBeanDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetBeanOptions($search: String, $first: Int, $after: Cursor) {\n  beansCollection(\n    first: $first\n    after: $after\n    filter: {name: {ilike: $search}}\n    orderBy: [{roaster_id: AscNullsLast}, {name: AscNullsLast}]\n  ) {\n    edges {\n      node {\n        id\n        name\n        roasters {\n          id\n          name\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}'
): typeof import('./graphql').GetBeanOptionsDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetBeans($filter: beansFilter, $first: Int, $after: Cursor, $orderBy: [beansOrderBy!]) {\n  beansCollection(\n    first: $first\n    after: $after\n    filter: $filter\n    orderBy: $orderBy\n  ) {\n    edges {\n      cursor\n      node {\n        id\n        slug\n        name\n        image_url\n        roast_type\n        process\n        roast_level\n        origin\n        created_at\n        average_rating\n        review_count\n        status\n        roasters {\n          id\n          name\n          slug\n        }\n        bean_tagsCollection {\n          edges {\n            node {\n              tags {\n                id\n                name\n              }\n            }\n          }\n        }\n        bean_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}'
): typeof import('./graphql').GetBeansDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetDashboardStats {\n  dashboard_statsCollection {\n    edges {\n      node {\n        id\n        total_users\n        total_beans\n        total_roasters\n        total_locations\n        total_bean_reviews\n        total_recipes\n        total_location_reviews\n      }\n    }\n  }\n  roastersCollection(first: 10, orderBy: [{average_rating: DescNullsLast}]) {\n    edges {\n      node {\n        id\n        name\n        average_rating\n        review_count\n        bean_count\n      }\n    }\n  }\n  beansCollection(first: 10, orderBy: [{average_rating: DescNullsLast}]) {\n    edges {\n      node {\n        id\n        name\n        average_rating\n        review_count\n      }\n    }\n  }\n  locationsCollection(first: 10, orderBy: [{average_rating: DescNullsLast}]) {\n    edges {\n      node {\n        id\n        name\n        average_rating\n        review_count\n      }\n    }\n  }\n}'
): typeof import('./graphql').GetDashboardStatsDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetLocations($filter: locationsFilter, $first: Int, $after: Cursor) {\n  locationsCollection(filter: $filter, first: $first, after: $after) {\n    edges {\n      node {\n        id\n        slug\n        name\n        description\n        image_url\n        address\n        latitude\n        longitude\n        url\n        instagram\n        claimed_by\n        created_at\n        is_published\n        location_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n        location_reviewsCollection {\n          edges {\n            node {\n              id\n              rating\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}'
): typeof import('./graphql').GetLocationsDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetMostLikedRoasters($first: Int) {\n  roastersCollection(\n    first: $first\n    orderBy: [{likes_count: DescNullsLast}]\n    filter: {is_published: {eq: true}}\n  ) {\n    edges {\n      node {\n        id\n        slug\n        name\n        profile_image_url\n        logo_url\n        location_city\n        location_state\n        location_country\n        bean_count\n        likes_count\n        created_at\n        is_published\n        roaster_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}'
): typeof import('./graphql').GetMostLikedRoastersDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetProfile($id: UUID!) {\n  profilesCollection(filter: {id: {eq: $id}}) {\n    edges {\n      node {\n        id\n        username\n        display_name\n        bio\n        profile_image_url\n        location\n        instagram\n        url\n        created_at\n      }\n    }\n  }\n}'
): typeof import('./graphql').GetProfileDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetRoaster($id: UUID!, $filter: roastersFilter) {\n  roastersCollection(filter: $filter) {\n    edges {\n      node {\n        id\n        name\n        slug\n        description\n        profile_image_url\n        logo_url\n        location_city\n        location_state\n        location_country\n        url\n        instagram\n        claimed_by\n        is_published\n        roaster_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n        beansCollection {\n          edges {\n            node {\n              id\n              slug\n              name\n              description\n              origin\n              process\n              roast_level\n              average_rating\n              created_at\n              status\n              bean_likesCollection {\n                edges {\n                  node {\n                    id\n                    user_id\n                  }\n                }\n              }\n              bean_reviewsCollection {\n                edges {\n                  node {\n                    id\n                    rating\n                  }\n                }\n              }\n            }\n          }\n        }\n        created_at\n      }\n    }\n  }\n}'
): typeof import('./graphql').GetRoasterDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetRoasters($filter: roastersFilter, $first: Int, $after: Cursor, $orderBy: [roastersOrderBy!]) {\n  roastersCollection(\n    filter: $filter\n    first: $first\n    after: $after\n    orderBy: $orderBy\n  ) {\n    edges {\n      node {\n        id\n        slug\n        name\n        profile_image_url\n        logo_url\n        location_city\n        location_state\n        location_country\n        claimed_by\n        created_at\n        is_published\n        bean_count\n        roaster_likesCollection {\n          edges {\n            node {\n              id\n              user_id\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}'
): typeof import('./graphql').GetRoastersDocument;
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetUserLikes($userId: UUID!, $first: Int, $after: Cursor) {\n  bean_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        beans {\n          id\n          slug\n          name\n          roaster_id\n          process\n          image_url\n          roasters {\n            name\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  roaster_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        roasters {\n          id\n          slug\n          name\n          profile_image_url\n          location_city\n          location_state\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  location_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        locations {\n          id\n          slug\n          name\n          image_url\n          address\n          latitude\n          longitude\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n  recipe_likesCollection(\n    filter: {user_id: {eq: $userId}}\n    first: $first\n    after: $after\n  ) {\n    edges {\n      node {\n        id\n        created_at\n        recipes {\n          id\n          slug\n          title\n          image_url\n          created_at\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}'
): typeof import('./graphql').GetUserLikesDocument;

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}
